{"version":3,"file":"1-timer-a5662c2b.js","sources":["../../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport iziToast from \"izitoast\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, '0');\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nconst datetimePicker = document.getElementById('datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysElement = document.querySelector('[data-days]');\nconst hoursElement = document.querySelector('[data-hours]');\nconst minutesElement = document.querySelector('[data-minutes]');\nconst secondsElement = document.querySelector('[data-seconds]');\n\nlet userSelectedDate;\n\nflatpickr(datetimePicker, {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    const currentDate = new Date();\n\n    if (userSelectedDate <= currentDate) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n});\n\nstartButton.addEventListener('click', () => {\n  startButton.disabled = true;\n\n  const timerInterval = setInterval(() => {\n    const currentDate = new Date();\n    const timeDifference = userSelectedDate - currentDate;\n\n    if (timeDifference <= 0) {\n      clearInterval(timerInterval);\n      iziToast.success({\n        title: 'Success',\n        message: 'Countdown completed!',\n      });\n      return;\n    }\n\n    const { days, hours, minutes, seconds } = convertMs(timeDifference);\n\n    daysElement.textContent = addLeadingZero(days);\n    hoursElement.textContent = addLeadingZero(hours);\n    minutesElement.textContent = addLeadingZero(minutes);\n    secondsElement.textContent = addLeadingZero(seconds);\n  }, 1000);\n});"],"names":["addLeadingZero","value","convertMs","ms","days","hours","minutes","seconds","datetimePicker","startButton","daysElement","hoursElement","minutesElement","secondsElement","userSelectedDate","flatpickr","selectedDates","currentDate","iziToast","timerInterval","timeDifference"],"mappings":"sCAKA,SAASA,EAAeC,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC,CAEA,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,MAAMC,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAc,SAAS,cAAc,aAAa,EAClDC,EAAe,SAAS,cAAc,cAAc,EACpDC,EAAiB,SAAS,cAAc,gBAAgB,EACxDC,EAAiB,SAAS,cAAc,gBAAgB,EAE9D,IAAIC,EAEJC,EAAUP,EAAgB,CACxB,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQQ,EAAe,CACrBF,EAAmBE,EAAc,GACjC,MAAMC,EAAc,IAAI,KAEpBH,GAAoBG,GACtBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDT,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,CAAC,EAEDA,EAAY,iBAAiB,QAAS,IAAM,CAC1CA,EAAY,SAAW,GAEvB,MAAMU,EAAgB,YAAY,IAAM,CACtC,MAAMF,EAAc,IAAI,KAClBG,EAAiBN,EAAmBG,EAE1C,GAAIG,GAAkB,EAAG,CACvB,cAAcD,CAAa,EAC3BD,EAAS,QAAQ,CACf,MAAO,UACP,QAAS,sBACjB,CAAO,EACD,MACD,CAED,KAAM,CAAE,KAAAd,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYL,EAAUkB,CAAc,EAElEV,EAAY,YAAcV,EAAeI,CAAI,EAC7CO,EAAa,YAAcX,EAAeK,CAAK,EAC/CO,EAAe,YAAcZ,EAAeM,CAAO,EACnDO,EAAe,YAAcb,EAAeO,CAAO,CACpD,EAAE,GAAI,CACT,CAAC"}